@use '../base/variables' as *;

// Media Queries
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    } @else {
        @warn "No value found for `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $gap: 0) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    @if $gap != 0 {
        gap: $gap;
    }
}

// Grid
@mixin grid($columns: 1, $gap: 0) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    @if $gap != 0 {
        gap: $gap;
    }
}

// Container
@mixin container {
    width: 100%;
    max-width: map-get($container, 'max-width');
    margin-left: auto;
    margin-right: auto;
    padding-left: map-get($container, 'padding');
    padding-right: map-get($container, 'padding');
}

// Transitions
@mixin transition($properties...) {
    $transitions: ();
    @each $property in $properties {
        $transitions: append($transitions, $property map-get($transitions, 'normal') ease, comma);
    }
    transition: $transitions;
}

// Hover Effect
@mixin hover {
    @media (hover: hover) {
        &:hover {
            @content;
        }
    }
}

// Focus Styles
@mixin focus-visible {
    &:focus-visible {
        outline: 2px solid map-get($colors, 'accent');
        outline-offset: 2px;
        @content;
    }
}

// Button Reset
@mixin button-reset {
    border: none;
    background: none;
    padding: 0;
    margin: 0;
    cursor: pointer;
    font: inherit;
    color: inherit;
    
    &:focus {
        outline: none;
    }
}

// Truncate Text
@mixin truncate($lines: 1) {
    @if $lines == 1 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
}

// Aspect Ratio
@mixin aspect-ratio($width, $height) {
    position: relative;
    
    &::before {
        content: '';
        display: block;
        padding-top: ($height / $width) * 100%;
    }
    
    > * {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

// Glass Effect
@mixin glass-effect($opacity: 0.1) {
    background: rgba(255, 255, 255, $opacity);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
}
